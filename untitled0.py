# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O3YiDHxwSjQSHs9CdiVHc5hw_ExRjBF-
"""

!pip install ipywidgets

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import ipywidgets as widgets
from IPython.display import display

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Final_Augmented_dataset_Diseases_and_Symptoms.csv").fillna(0)
df.head()

# Assume last column is the target
X = df.iloc[:, 1:]
y = df.iloc[:, 0]

# Encode the disease names
le = LabelEncoder()

y_encoded = le.fit_transform(y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Train Decision Tree
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Evaluate
accuracy = accuracy_score(y_test, model.predict(X_test))
print("âœ… Model trained with accuracy:", accuracy)

import ipywidgets as widgets
from IPython.display import display

# Get symptom column names
symptoms = list(X.columns)

# Create checkbox for each symptom
checkboxes = [widgets.Checkbox(value=False, description=symptom) for symptom in symptoms]
symptom_box = widgets.VBox(checkboxes)

# Predict button and output display
predict_button = widgets.Button(description="Predict Disease", button_style='success')
output = widgets.Output()

# Function to predict
def predict_disease(b):
    input_vector = [1 if cb.value else 0 for cb in checkboxes]
    pred = model.predict([input_vector])[0]
    disease = le.inverse_transform([pred])[0]

    output.clear_output()
    with output:
        print("ðŸ©º Predicted Disease:", disease)

predict_button.on_click(predict_disease)

# Display UI
display(widgets.Label("âœ… Select Symptoms:"), symptom_box, predict_button, output)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("âœ… Accuracy of the model:", accuracy)

